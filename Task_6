import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import pandas as pd

def load_data():
    data = pd.read_csv("creditcard.csv")
    X = data.iloc[:, :-1].values
    y = data.iloc[:, -1].values
    return X, y
credit_card_data.head()
credit_card_data.info()
credit_card_data.describe()
X = credit_card_data.drop('Class', axis=1)
y = credit_card_data['Class']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
logistic_regression_model = LogisticRegression(max_iter=1000)
logistic_regression_model.fit(X_train, y_train)
y_pred = logistic_regression_model.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
print(accuracy_score(y_test, y_pred))
X_train, y_train = load_data()
num_features = X_train.shape[1]
new_data = np.array([5.0, -5.0, 5.0, -5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
if new_data.shape[0] < num_features:
    extra_features = np.zeros(num_features - new_data.shape[0])
    new_data = np.concatenate((new_data, extra_features))
elif new_data.shape[0] > num_features:
    new_data = new_data[:num_features]
new_data = new_data.reshape(1, -1)
logistic_regression_model = LogisticRegression(max_iter=1000)
logistic_regression_model.fit(X_train, y_train)
print(logistic_regression_model.predict(new_data))
